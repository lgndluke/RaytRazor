name: build-development

on:
  push:
    branches:
      - development_UI
    paths:
      - '4. Software/4.1 Quellen/**'

jobs:
  build:
    name: Build Pre-Release
    runs-on: windows-latest
    timeout-minutes: 60
    permissions:
      security-events: none
      packages: read
      actions: read
      contents: write

    strategy:
      fail-fast: true
      matrix:
        include:
          - language: c-cpp
            build-mode: manual

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.1

      - name: Install RaytRazor Project dependencies.
        shell: pwsh
        run: |
          Write-Host "Installing Chocolatey"
          Set-ExecutionPolicy Bypass -Scope Process -Force;
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          
          Write-Host "Refreshing environmental variables"
          refreshenv
          
          Write-Host "Installing dependencies using Chocolatey"
          choco install -y cmake make mingw

      - name: Generate Version Syntax
        id: generate_version
        shell: pwsh
        run: |
          $VERSION_FILE = "4. Software/4.1 Quellen/RaytRazor/VERSION.DAT"
          $BUILD_NUMBER = $env:GITHUB_RUN_NUMBER
          if (Test-Path $VERSION_FILE) {
            $VERSION = Get-Content $VERSION_FILE
          } else {
            $VERSION="0.0.0"
          }
          $VERSION_PARTS = $VERSION -split '\.'
          $MAJOR = $VERSION_PARTS[0]
          $MINOR = $VERSION_PARTS[1]
          $PATCH = $VERSION_PARTS[2]
          $BUILD = "$BUILD_NUMBER"
          $FULL_VERSION = "$MAJOR.$MINOR.$PATCH.$BUILD"
          Write-Host "Build version: $FULL_VERSION"
          "version=$FULL_VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "version=$FULL_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: Debug Build Outputs
        shell: pwsh
        run: |
          Write-Host "Version env:GITHUB_OUTPUT: ${{ steps.generate_version.outputs.version }}"
          Write-Host "Version env:GITHUB_ENV: ${{ env.version }}"

      - name: Build RaytRazor Project
        shell: pwsh
        run: |
          Write-Host "Creating build directory"
          New-Item -ItemType Directory -Path build
          
          Write-Host "Moving to build directory"
          Set-Location build
          
          Write-Host "Path of build directory"
          pwd
          
          Write-Host "Building Project"
          cmake "../4. Software/4.1 Quellen/RaytRazor" -G "MinGW Makefiles"
          mingw32-make
          
          Write-Host "Listing built folders/files"
          dir

      - name: Create release directory
        shell: pwsh
        run: |
          Write-Host "Changing back to the RaytRazor directory"
          Set-Location ..
          
          Write-Host "Listing contents of RaytRazor directory"
          Get-ChildItem -Path .
          
          Write-Host "Creating release directory"
          New-Item -ItemType Directory -Path release
          
          Write-Host "Copying RaytRazor executable to release directory"
          Copy-Item "RaytRazor/build/RaytRazor.exe" "release/"
          
          Write-Host "Copying version file to release directory"
          Copy-Item "RaytRazor/4. Software/4.1 Quellen/RaytRazor/VERSION.DAT" "release/VERSION.DAT"

          Write-Host "Listing contents of release directory"
          Get-ChildItem -Path release/

      - name: Upload Release
        uses: actions/upload-artifact@v4
        with:
          name: RaytRazor-PreRelease-${{ env.version }}
          path: D:\a\RaytRazor\release

  deploy:
    name: Deploy Pre-Release
    runs-on: windows-latest
    needs: build
    env:
      version: ${{ needs.build.outputs.version }}
    steps:
      - name: Debug version in Deploy
        shell: pwsh
        run: |
          Write-Host "Version of env.version: ${{ env.version }}"
          Write-Host "Version of steps.generate_version.outputs.version: ${{ steps.generate_version.outputs.version }}"
          Write-Host "Version of needs.build.outputs.version: ${{ needs.build.outputs.version }}"

      - name: Create Pre-Release
        id: create_prerelease
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          tag_name: RaytRazor-PreRelease-${{ env.version }}
          release_name: RaytRazor-PreRelease-${{ env.version }}
          draft: false
          prerelease: true

      - name: Upload Pre-Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_prerelease.outputs.upload_url }}
          asset_path: release/RaytRazor
          asset_name: RaytRazor-${{ env.version }}.exe
          asset_content_type: application/octet-stream
